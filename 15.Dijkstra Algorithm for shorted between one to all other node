Implementing Dijkstra Algorithm

Given a weighted, undirected and connected graph of V vertices and an adjacency list adj where adj[i] is a 
list of lists containing two integers where the first integer of each list j denotes there is edge between i and j , second
integers corresponds to the weight of that  edge . You are given the source vertex S and You to Find the shortest distance of 
all the vertex's from the source vertex S. You have to return a list of integers denoting shortest distance between each node 
and Source vertex S.
 
 Note: The Graph doesn't contain any negative weight cycle.

Example 1:
Input:
V = 2
adj [] = {{{1, 9}}, {{0, 9}}}
S = 0
Output:
0 9
Explanation:

The source vertex is 0. Hence, the shortest 
distance of node 0 is 0 and the shortest 
distance from node 1 is 9.


    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
         vector<int>dist(V,1e9);
         dist[S]=0;
         priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
         pq.push({0,S});
         while(!pq.empty()){
             int x=pq.top().first;
             int y=pq.top().second;
             pq.pop();
             for(auto it:adj[y]){
                 if(x+it[1]<dist[it[0]]){
                     dist[it[0]]=x+it[1];
                     pq.push({dist[it[0]],it[0]});
                 }
             }
         }
         return dist;
    }
