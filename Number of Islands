Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

Example 1:
Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1

Example 2:
Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3

//Approach:- is simple go through each grid and check is grid[i][j]==1 then call dfs and dfs function will check its neighboring is neighbouring is '0' the return
remove to next grid... the number of times the loop call dfs is equal to number of islands...
// Code
class Solution {
public:
bool isValid(int x,int y,vector<vector<char>>&grid){
    int n=grid.size();
    int m=grid[0].size();
    if(x>=0 && x<n && y>=0 && y<m && grid[x][y]=='1'){
        return true;
    }
    return false;
}
   void dfs(int x,int y,vector<vector<char>>&grid){
       grid[x][y]='0';
       if(isValid(x-1,y,grid)){
           dfs(x-1,y,grid);
       }
       if(isValid(x+1,y,grid)){
           dfs(x+1,y,grid);
       }
       if(isValid(x,y-1,grid)){
           dfs(x,y-1,grid);
       }
       if(isValid(x,y+1,grid)){
           dfs(x,y+1,grid);
       }
   }
    int numIslands(vector<vector<char>>&grid) {
        int n=grid.size();
        int m=grid[0].size();
        int cnt=0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]=='1'){
                    cnt++;
                    dfs(i,j,grid);
                }
            }
        }
        return cnt;
    }
};
