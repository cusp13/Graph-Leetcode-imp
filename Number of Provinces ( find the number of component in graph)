//Number of Provinces//
There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

Example 1:

Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

//Approach: In this problem we have to find the number of connected component so we will use dfs algorithms we will run a loop till number of nodes in the graph if
if graph is found disconnected the  we will count and again call the dfs untill the loop complete...
//CODE

class Solution {
public:
void dfs(int node,vector<int>list[],vector<int>&vis){
    vis[node]=1;
    for(auto it:list[node]){
        if(vis[it]!=1){
            dfs(it,list,vis);
        }
    }
    return;
}
    int findCircleNum(vector<vector<int>>&graph) {
        int n=graph.size();
        vector<int>list[n+1];
        int m=graph[0].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(graph[i][j]==1 && i!=j){
                   list[i].push_back(j);
                   list[j].push_back(i);
                }
            }
        }
        vector<int>vis(n+1,0);
        int cnt=0;
        for(int i=0;i<n;i++){
            if(vis[i]!=1){
                cnt++;
                dfs(i,list,vis);
            }
        }
        return cnt;
    }
};
