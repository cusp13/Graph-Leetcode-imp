Given an undirected graph with V vertices. We say two vertices u and v belong to a single province if there is a path from u to v or v to u. 
Your task is to find the number of provinces.

Note: A province is a group of directly or indirectly connected cities and no other cities outside of the group.

Example 1:

Input:
[
 [1, 0, 1],
 [0, 1, 0],
 [1, 0, 1]
]

Output:
2
Explanation:
The graph clearly has 2 Provinces [1,3] and [2]. As city 1 and city 3 has a path between them they belong to a single province.
City 2 has no path to city 1 or city 3 hence it belongs to another province.

//CODE
void dfs(vector<int>list[],vector<int>&ans,vector<int>&vis,int cnt,int start){
      vis[start]=1;
      for(auto it:list[start]){
          if(vis[it]!=1){
              vis[it]=1;
              dfs(list,ans,vis,cnt,it);
          }
      }
  }
    int numProvinces(vector<vector<int>> adj, int V) {
        vector<int>list[V];
        int n=adj.size();
        int m=adj[1].size();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(adj[i][j] && i!=j && adj[i][j]){
                    list[i].push_back(j);
                    list[j].push_back(i);
                }
            }
        }
        int cnt=0;
        vector<int>ans;
        vector<int>vis(V,0);
        for(int i=0;i<V;i++){
            if(vis[i]!=1){
              cnt++;
              dfs(list,ans,vis,cnt,i);
           }
        }
        return cnt;
    }
